{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/en/recompose","result":{"data":{"markdownRemark":{"html":"<p>This article will show you a different way to create React components. We’ll discuss responsibilities, HOCs, functional components and Recompose.</p>\n<p>In React’s world, we have different patterns and ways to structure folders, files and <strong>manage responsibility</strong>. </p>\n<p>As our father showed us: <a href=\"https://twitter.com/dan_abramov/status/1027245759232651270\">https://twitter.com/dan_abramov/status/1027245759232651270</a></p>\n<h2><strong>Managing Responsibilities</strong></h2>\n<p>One of the most common patterns is dividing your component into <strong>presentation</strong> and <strong>behavior</strong>. The first part will be responsible for the presentation and the looks of it, and the second for how you interact with them. This pattern was introduced by <a href=\"https://twitter.com/dan_abramov\">Dan Abramov</a> and it’s known as <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Presentational and Container</a>, or <a href=\"https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\">Smart and Dumb</a>.</p>\n<p>Other patterns, can be applied to different contexts like <a href=\"https://medium.com/styled-components/component-folder-pattern-ee42df37ec68\">Component Folder</a>, <a href=\"https://medium.freecodecamp.org/scaling-your-redux-app-with-ducks-6115955638be\">Redux Duck</a> and <a href=\"https://reactarmory.com/answers/how-should-i-separate-components\">Controller and View</a>. We won’t discuss them here, but you can find more information accessing the links.</p>\n<h2><strong>Higher-Order Components — HOCs</strong></h2>\n<p><a href=\"https://reactjs.org/docs/higher-order-components.html\">Higher-Order Components</a>, are functions that accept a component as an argument and return a new one with the changed behavior. If you already used libraries like <a href=\"https://github.com/reduxjs/react-redux\">react-redux</a> or <a href=\"https://github.com/ReactTraining/react-router\">react-router</a>, you’re probably acquainted with the HOCs <strong>connect()</strong> and <strong>withRouter()</strong>.</p>\n<blockquote>\n<p>Reuse behavior through different components.</p>\n</blockquote>\n<h2><strong>Stateless Functional Components</strong> — <strong>SFC</strong></h2>\n<p>These are components without local state or lifecycle and all their data is provided by properties. You can take a look at <a href=\"https://hackernoon.com/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933dbc\">this post</a> to understand the pros and cons of <strong>functional components</strong>.</p>\n<blockquote>\n<p>“Each component must be ease to test, without mock or unnecessary changes.”</p>\n</blockquote>\n<h2><strong>Recompose</strong></h2>\n<p>Recompose is a collection of <a href=\"https://github.com/acdlite/recompose/blob/master/docs/API.md#higher-order-components\">tiny HOCs</a> that help the development guided by the functional paradigm. It’s known as the <a href=\"https://lodash.com/\">Lodash</a> for React.</p>\n<p>The human behind this tool is <a href=\"https://twitter.com/acdlite\">Andrew Clark</a>, that also created the <a href=\"https://github.com/acdlite/redux-router\">redux-router</a>, and became a React <strong>core team</strong> member.</p>\n<p>Here are some of the more important HOCs:</p>\n<h3><strong>withState()</strong></h3>\n<p>This HOC allow us to add a state and a method to manipulate this state and an initial value. Everything will be available through properties.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rVFzjoTsY6w6v58YZ7Abxw.png\" alt=\"https://codesandbox.io/s/ryknvzjq4m\">\n<em><a href=\"https://codesandbox.io/s/ryknvzjq4m\">https://codesandbox.io/s/ryknvzjq4m</a></em></p>\n<h3>withHandlers()</h3>\n<p>This HOC is used to add <strong>event handlers</strong>, preventing the creation of new ones for each render of the component.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LcDitstDZjjPLQ3FuFZ2pQ.png\" alt=\"https://codesandbox.io/s/n7mmkkl0l\">\n<em><a href=\"https://codesandbox.io/s/n7mmkkl0l\">https://codesandbox.io/s/n7mmkkl0l</a></em></p>\n<h3>lifecycle()</h3>\n<p>This HOC give us access to the lifecycle method of the component. Any state changes will be available through the properties.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*rXh09LedxeFrjedJAEEPzQ.png\" alt=\"https://codesandbox.io/s/vqp57vnyml\">\n<em><a href=\"https://codesandbox.io/s/vqp57vnyml\">https://codesandbox.io/s/vqp57vnyml</a></em></p>\n<h3>branch()</h3>\n<p>This HOC is perfect to work with conditional rendering, receiving one method to test the condition and two components to render for each condition.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*GAFPk9PcvllnML2aZbtf1g.png\" alt=\"https://codesandbox.io/s/ryx2rr034m\">\n<em><a href=\"https://codesandbox.io/s/ryx2rr034m\">https://codesandbox.io/s/ryx2rr034m</a></em></p>\n<h3>nest()</h3>\n<p>This HOC, group components by the same context. It’s perfect to create interfaces like <a href=\"http://bradfrost.com/blog/post/atomic-web-design/\">atomic design</a> with molecules and organisms.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*2Z6WQBTPA7-r95_PsXzjFg.png\" alt=\"https://codesandbox.io/s/18wl0x92p4\">\n<em><a href=\"https://codesandbox.io/s/18wl0x92p4\">https://codesandbox.io/s/18wl0x92p4</a></em></p>\n<h3>mapProps()</h3>\n<p>This HOC maps all of the properties from the component and transforms them into a new collection. It’s great to work with <a href=\"https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state\">derived properties</a>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*60DxuD7F6u8wpN-hRXzlFA.png\" alt=\"https://codesandbox.io/s/l7qm7zy74l\">\n<em><a href=\"https://codesandbox.io/s/l7qm7zy74l\">https://codesandbox.io/s/l7qm7zy74l</a></em></p>\n<h3>compose()</h3>\n<p>This Higher Order Function is used for performing right-to-left function composition. Libraries like <a href=\"https://redux.js.org/api/compose\">redux</a> and <a href=\"https://github.com/kriszyp/compose\">compose</a> also use this implementation. It’s like a reverse <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Pipeline_operator\">pipe</a>.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-Yzpnjjcw7mxvdJu_vPtFA.png\" alt=\"https://codesandbox.io/s/3rm8597nn6\">\n<em><a href=\"https://codesandbox.io/s/3rm8597nn6\">https://codesandbox.io/s/3rm8597nn6</a></em></p>\n<hr>\n<p>Hey, what did you think about this method of development? You want to go deep\nand search more? The <a href=\"https://github.com/acdlite/recompose/blob/master/docs/API.md\">documentation</a> is always a good start. As a complement, the talk about <a href=\"https://www.youtube.com/watch?v=zD_judE-bXk&#x26;t=2s\">Recomposing React application</a>can give you a solid base, but remember that practice by coding is always the best way to understand.</p>\n<p>All examples are in <a href=\"http://codesandbox.io/\">codesandbox</a>, where you can change and see your changes in real-time. I made <a href=\"https://speakerdeck.com/thulioph/recompose\">this presentation</a> with more details about the subject. Any doubts or questions? Please leave a comment and share them with us.</p>","frontmatter":{"date":"June 08, 2020","path":"/writings/en/recompose","title":"Recompose","imageSlug":"posts/recompose-cover.jpg"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"pathSlug":"/writings/en/recompose","next":null,"prev":{"frontmatter":{"path":"/writings/pt/frontend-agil","title":"Metodologia Ágil no Frontend"}}}}}
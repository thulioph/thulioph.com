{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/pt/frontend-agil","result":{"data":{"markdownRemark":{"html":"<p>Com a evolu√ß√£o de produtos digitais para web, √© cada vez mais importante desenvolver um c√≥digo que atenda a requisitos din√¢micos, permitindo a evolu√ß√£o na arquitetura do sistema para algo mais robusto ao mesmo tempo em que mant√©m um c√≥digo simples e compreens√≠vel.</p>\n<p>Neste blogpost, vamos entender mais sobre 3 pr√°ticas t√©cnicas da metodologia de desenvolvimento √°gil (Testes Automatizados, Integra√ß√£o e Entrega Cont√≠nua e Refatora√ß√£o) e sua rela√ß√£o com o desenvolvimento de software no geral. Al√©m disso, vamos falar sobre algumas ferramentas, boas pr√°ticas e caminhos que voc√™ pode usar para iniciar uma nova cultura de desenvolvimento.</p>\n<h2>Desenvolvimento √Ågil</h2>\n<p>Desenvolvimento √Ågil √© um conjunto de m√©todos e pr√°ticas que ajudam a construir um software melhor. Nele, o planeja\tmento √© revisado constantemente, levando em considera√ß√£o o aprendizado durante o processo, o sucesso √© baseado no valor entregue pelo software e o desenvolvimento √© uma atividade primariamente humana. Essas pr√°ticas s√£o guiadas por um manifesto com <a href=\"http://agilemanifesto.org/principles.html\">12 princ√≠pios</a>. N√£o vamos falar de cada um deles neste artigo, mas vamos lembrar um dos mais importantes:</p>\n<blockquote>\n<p>Nossa maior prioridade √© satisfazer o cliente, atrav√©s da entrega adiantada e cont√≠nua de software de valor. ‚Äî M√Å</p>\n</blockquote>\n<p>Ent√£o vamos √† pergunta que n√£o quer calar: como o desenvolvedor front-end pode aplicar t√©cnicas que impactem diretamente na satisfa√ß√£o dos clientes?</p>\n<h2>Testes Automatizados</h2>\n<p>Como o pr√≥prio nome j√° sugere, √© o processo de execu√ß√£o dos testes de maneira automatizada e isolada. Boas pr√°ticas s√£o bem-vindas em todos os passos do desenvolvimento, ent√£o ter um <a href=\"http://wiki.c2.com/?ArrangeActAssert\">padr√£o de organiza√ß√£o</a> e escrita vai ajudar na compreens√£o do que est√° acontecendo.</p>\n<p>A <a href=\"https://martinfowler.com/bliki/TestPyramid.html\">pir√¢mide de testes</a> √© um conceito que ajuda a entender os n√≠veis e a rela√ß√£o custo-tempo entre tipos diferentes de testes automatizados. Tenha em mente que muitos testes unit√°rios podem validar um teste de integra√ß√£o, e muitos testes de integra√ß√£o podem validar testes de UI.</p>\n<p><img src=\"https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png\" alt=\"martinfowler.com/bliki/TestPyramid\">\n<em><a href=\"https://martinfowler.com/bliki/TestPyramid.html\">martinfowler.com/bliki/TestPyramid</a></em></p>\n<p>No front, uma boa escolha √© a utiliza√ß√£o do <a href=\"https://jestjs.io/\">Jest</a> como framework de testes. Ele vai ser √∫til nas camadas de <strong>testes unit√°rios</strong> e <strong>servi√ßo</strong>. Basta instalar como depend√™ncia do projeto e, mesmo com zero configura√ß√µes, voc√™ j√° consegue criar e executar testes. Para testes que est√£o no n√≠vel de UI, uma boa ferramenta √© o <a href=\"https://www.cypress.io/\">Cypress</a>. Uma outra ferramenta que ajuda a compreender melhor a cobertura de testes na sua aplica√ß√£o √© o <a href=\"https://coveralls.io/\">Coveralls</a>, vale a pena testar.</p>\n<p>Em um ambiente onde v√°rias pessoas colaboram para o mesmo c√≥digo, √© interessante que existam configura√ß√µes para executar os testes antes de um git push. Isso garante que nenhum c√≥digo ser√° versionado caso os testes n√£o estejam passando. Para ajudar nesse tipo de ambiente, uma ferramenta que eu uso bastante √© o <a href=\"https://github.com/typicode/husky\">husky</a>.</p>\n<h2>Integra√ß√£o e Entrega Cont√≠nua</h2>\n<p>Integra√ß√£o e entrega cont√≠nua s√£o termos bastante usados e sugestivos.</p>\n<p>Integra√ß√£o Cont√≠nua √© uma <a href=\"https://martinfowler.com/articles/continuousIntegration.html\">cole√ß√£o de pr√°ticas</a> na qual todo o trabalho desenvolvido √© integrado de maneira frequente por membros de um time, de prefer√™ncia diariamente.</p>\n<p>Entrega Cont√≠nua √© <a href=\"https://martinfowler.com/bliki/ContinuousDelivery.html\">um m√©todo</a> no qual o build gerado pode ser confi√°vel e disponibilizado para produ√ß√£o a qualquer momento, para qualquer ambiente.</p>\n<p>Se seu c√≥digo est√° no <a href=\"https://github.com/\">Github</a>, voc√™ pode configurar integra√ß√µes com diversas ferramentas. Algumas delas, como <a href=\"https://circleci.com/\">CircleCI</a> e <a href=\"https://travis-ci.org/\">Travis</a>, s√£o bem completas e amplamente adotadas. O <a href=\"https://www.netlify.com/\">Netlify</a> tamb√©m pode ser uma boa alternativa, especialmente para quem adota o Storybook.</p>\n<p>A partir de um <strong>merge</strong> bem sucedido entre <strong>branches</strong>, ou mesmo de um <strong>commit</strong>, o processo de deploy √© iniciado. Uma s√©rie de passos acontecem sequencialmente, desde de que todos os testes tenham passado, ou seja, <a href=\"https://take.ms/cgTUC\">desde que tudo esteja verdinho</a>. A ferramenta de CI vai executar os testes, depois vai executar o build, e, em sequ√™ncia, dar deploy para o seu servidor, podendo encadear outras a√ß√µes como coletar o coverage, publicar algum pacote no NPM ou mandar uma mensagem no Slack.</p>\n<p><a href=\"todaysoftmag.com/article/1068/continuous-delivery\"><img src=\"http://www.todaysoftmag.ro/tsm/images/articles/tsm27/a41.png\" alt=\"todaysoftmag.com/article/1068/continuous-delivery\"></a></p>\n<p><em><a href=\"https://www.todaysoftmag.com/article/1068/continuous-delivery\">todaysoftmag.com/article/1068/continuous-delivery</a></em></p>\n<p>Para uma integra√ß√£o e entrega de forma cont√≠nua √© fundamental <strong>testar em um ambiente que simule o de produ√ß√£o</strong>, ter um processo de testes e de build r√°pidos e automatizados, al√©m deixar claro para todos membros da equipe as novas regras e procedimentos adotados.</p>\n<h2>Refatora√ß√£o</h2>\n<p>Tecnicamente falando, refatorar significa <a href=\"https://refactoring.com/\">alterar a estrutura interna de uma parte do c√≥digo, sem mudar seu comportamento externo</a>. O objetivo √© que o c√≥digo comunique de maneira clara o que est√° sendo feito.</p>\n<p>A refatora√ß√£o n√£o √© uma tarefa especial que tem prioridade alta de entrega. Ela √© parte do dia a dia de um programador. Quando estou adicionando uma nova funcionalidade em um c√≥digo j√° existente, por exemplo, observo se sua estrutura permite receber a nova mudan√ßa. Caso n√£o, eu atualizo o c√≥digo para tornar a nova adi√ß√£o mais f√°cil. Uma vez feita essa mudan√ßa, adiciono o novo comportamento. Caso o c√≥digo ainda n√£o esteja t√£o claro como eu acho que ele deveria, eu fa√ßo uma refatora√ß√£o para que da pr√≥xima vez que algu√©m for ler o c√≥digo entenda mais facilmente o que ele faz. Uma excelente maneira de se evoluir um c√≥digo j√° existente √© atrav√©s do <strong>pareamento</strong>. Com duas pessoas pensando na resolu√ß√£o de um problema, a qualidade tende a aumentar.</p>\n<p>Uma observa√ß√£o muito importante a ser feita acerca da refatora√ß√£o √© a seguinte: Cada modifica√ß√£o deve ser pequena, o objetivo √© fazer com que uma sequ√™ncia de pequenas mudan√ßas produzam uma reestrutura√ß√£o significativa no produto. Lembre-se, refatorar tamb√©m reduz o custo das melhorias, afinal aplicar mudan√ßas em um c√≥digo compreens√≠vel e bem estruturado √© menos custoso do que tentar mudar um c√≥digo longo e complexo.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*jjASXWv5AnJ5SBuZ.jpg\" alt=\"refactoring\">\n<em><a href=\"https://medium.com/justideas-io/explaining-the-joy-of-refactoring-to-the-non-developer-72d97223359c\">medium.com/justideas-io/explaining-the-joy-of-refactoring</a></em></p>\n<hr>\n<p>E a√≠? O que achou dessas pr√°ticas? J√° utiliza ou utilizou alguma? Se tiver alguma d√∫vida fique √† vontade para comentar. üôÇ</p>\n<p>Algumas palavras deste texto est√£o <a href=\"#\">grifadas</a>, elas s√£o links com informa√ß√µes adicionais sobre os t√≥picos. Caso queira saber mais sobre pr√°ticas do desenvolvimento √°gil, aconselho o site do <a href=\"https://martinfowler.com/\">Martin Fowler</a>, que tem diversos artigos, al√©m de livros sobre o assunto. Nos vemos por a√≠, se quiser dicas fale comigo no <a href=\"https://twitter.com/thulioph_\">Twitter</a> e at√© a pr√≥xima!</p>","frontmatter":{"date":"October 16, 2019","path":"/writings/pt/frontend-agil","title":"Metodologia √Ågil no Frontend","imageSlug":"posts/frontend-agil-cover.png"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"pathSlug":"/writings/pt/frontend-agil","next":{"frontmatter":{"path":"/writings/en/recompose","title":"Recompose"}},"prev":{"frontmatter":{"path":"/writings/en/web-components-with-vuejs","title":"Web-Components with Vuejs"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/writings/pt/releases-de-seguranca","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Com o Node e Webpack não foi diferente.</p>\n</blockquote>\n<p>Recentemente dois grandes projetos receberam releases de segurança por questões de vulnerabilidades.\nO primeiro foi o <a href=\"https://webpack.js.org/\">Webpack</a> que permitia um agente malicioso executar um ataque conhecido como man-in-the-middle e o segundo foi o <a href=\"https://nodejs.org/en/\">Nodejs</a>, que desde a sua versão 4.x tinha problemas de DDOS e recentemente de Constant Hashtable Seeds.</p>\n<p>Este artigo pretende levar o tema de Segurança para quem não tem muito conhecimento, e mostrar que casos de vulnerabilidade são mais comuns do que se imagina, fique esperto!</p>\n<h2>Webpack &#x26; Preact CLI</h2>\n<p>A vulnerabilidade foi descoberta pelo <a href=\"https://twitter.com/michaellnorth\">Mike North</a> após o live streaming do Google I/O deste ano, onde o Addy Osmani apresentava uma série de ferramentas do ecossistema das Progressive Web Apps. Parte dessas ferramentas precisam que a aplicação seja servida sobre o protocolo do HTTP/2, que atualmente não requer criptografia e é aconselhado que seja implementado apenas para conexões TLS, na prática apenas para conexões seguras, as que utilizam <strong>HTTPS</strong>.</p>\n<p>Para um perfeito funcionamento, conexões HTTPS precisam de um certificado.</p>\n<p>E para que nao houvesse problemas na utilização da ferramenta, o <a href=\"https://twitter.com/_developit\">Jason Miller</a>, criador do <a href=\"https://github.com/developit/preact-cli\">preact-cli</a>, acabou gerando e incluindo um certificado ao projeto, porém contendo a sua chave privada. A mesma escolha de gerar um certificado foi tomada pelo pessoal do <a href=\"https://github.com/webpack/webpack-dev-server/\">webpack-dev-server</a> que também exibia a chave privada de quem gerou o certificado.</p>\n<blockquote>\n<p><a href=\"https://twitter.com/michaellnorth/status/877202039394230272\">https://twitter.com/michaellnorth/status/877202039394230272</a></p>\n</blockquote>\n<p>É ai que está a vulnerabilidade por trás do ataque!</p>\n<h2>Man-in-the-Middle</h2>\n<p>O MITM como também é conhecido, consiste em um agente mal intensionado “se posicionando” entre duas partes que estão tentando se comunicar, interceptando as mensagens enviadas e depois se passando por uma das partes para ter acesso a informação transmitida.</p>\n<p>No caso do Webpack e Preact, alguém com um pouco mais de experiência e conhecimento, poderia utilizar o certificado gerado para se passar como agente confiável, obtendo toda a troca de informações de quem utilizasse uma determinada rede. Este cenário poderia ser facilmente aplicado em redes fechadas, caso algum usuário mal intencionado tivesse acesso a um roteador configurado de forma errada.</p>\n<p><img src=\"https://miro.medium.com/max/2400/1*hbtxCC3O0nt7wL6T-t4q0Q.png\" alt=\"man-in-the-middle\"></p>\n<p>Esta vulnerabilidade permite que um agente mal intencionado possa facilmente observar e manipular todo o tráfego entre domínios sobre HTTPS sem que ninguém saiba, tornando todas as informações e dados inseguros.</p>\n<h2>Como se prevenir?</h2>\n<p>Como tentativa de mitigação de ataques do tipo MITM, um bom começo seria a utilização de <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning\">HTTP Public Key Pinning</a>, que nada mais é do que um header que associa uma chave pública no cliente com um servidor. Evite a transação de informação sigilosa ao utilizar redes wifi públicas.\nSe possível utilize o <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">HTTP Strict-Transport-Security</a> para informar ao browser que a sua aplicação deve apenas se comunicar sobre HTTPS, sendo uma das funcionalidade de segurança implementadas pelo header.</p>\n<h2>Nodejs</h2>\n<p>Alguns serviços como o <a href=\"https://heroku.com/\">Heroku</a>, por exemplo, entraram em contato com quem tinha alguma aplicação node rodando, solicitando que atualizassem assim que possível.</p>\n<blockquote>\n<p><a href=\"https://twitter.com/JeremyMorrell/status/884837533531734017\">https://twitter.com/JeremyMorrell/status/884837533531734017</a></p>\n</blockquote>\n<p>Para um melhor entendimento do que aconteceu, faz-se necessário compreender alguns conceitos como o do <strong>Hashtable</strong>.</p>\n<h3>Hashtable</h3>\n<p>É uma estrutura de dados que implementa um array associativo, podendo mapear chaves para valores. Basicamente é um grupo de listas linkadas ou linked-lists que devem ser pequenas para não comprometer seu desempenho, sendo utilizada em <strong>HTTP headers</strong>, <strong>representações JSON</strong> e em <strong>Sets</strong>, <strong>Objects</strong> e <strong>Maps</strong>.</p>\n<p>Hashtables utilizam uma função hash, que mapeia dados com um tamanho arbitrário para um tamanho fixo e os valores retornados são chamados de hashes. A idéia é distribuir os pares de chave/valor em uma série de buckets, onde dada uma chave o algoritmo computa o index, que sugere onde a entrada pode ser encontrada.</p>\n<p><img src=\"https://miro.medium.com/max/600/1*9a2pG0qaw16OvQnPGLPq5w.png\" alt=\"hash-table\">\n<em><a href=\"https://en.wikipedia.org/wiki/Hash_table\">https://en.wikipedia.org/wiki/Hash_table</a></em></p>\n<p>A brecha existia porque o suposto “random seed” que era utilizado na função hash, sempre era constante e nunca era alterado entre cada nova versão do Node (não era random).\nDurante o processo de compilação do node, o V8 obtém snapshots do contexto de onde foi inicializado e reutiliza no seu próximo boot, tudo isso para tornar as coisas mais rápidas.</p>\n<p>Uma vez que o agente mal intencionado obteve acesso ao seed, ele pode facilmente saturar uma <strong>linked-list</strong>, acabando com seu desempenho.</p>\n<blockquote>\n<p><a href=\"https://twitter.com/nodejs/status/884822255032823810\">https://twitter.com/nodejs/status/884822255032823810</a></p>\n</blockquote>\n<p>Até que outra solução seja implementada, a melhor escolha até o momento foi desabilitar por default os snapshots, onde provavelmente irá resultar em uma regressão de performance.</p>\n<p>O outro problema encontrado foi relacionado a DDOS que por se tratar de um ataque mais conhecido, não irei entrar em detalhes neste post.</p>\n<h2>Como se prevenir?</h2>\n<p>A principal recomendação é para atualizar a versão do Node nos projetos que você trabalha, uma lista completa com os patches foi disponibilizada <a href=\"https://nodejs.org/en/blog/vulnerability/july-2017-security-releases/\">no próprio site deles</a>.</p>\n<p>Ambos os releases que corrigem essas brechas de segurança já foram disponibilizados.\nPara o Preact-CLI você pode acessar <a href=\"https://github.com/developit/preact-cli/releases/tag/1.1.2\">este link</a> para obter o release, já o Webpack-dev-server você pode utilizar <a href=\"https://github.com/webpack/webpack-dev-server/releases/tag/v2.5.0\">este link</a> e para o Nodejs você pode consultar <a href=\"https://nodejs.org/en/blog/release/\">este link</a> e procurar pelos releases lançados no dia <strong>11 de julho de 2017</strong>.</p>\n<p>Caso queira consultar mais materiais na internet que estejam falando sobre este assunto, tem uma lista de links nas referências.</p>\n<h2>Referências</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45068905/heroku-node-js-remote-dos-constant-hashtable-seeds-vulnerability\">https://stackoverflow.com/questions/45068905/heroku-node-js-remote-dos-constant-hashtable-seeds-vulnerability</a></li>\n<li><a href=\"https://medium.com/@ahmadbamieh/nodejs-constant-hashtables-seeds-vulnerability-f03bf70e3593\">https://medium.com/@ahmadbamieh/nodejs-constant-hashtables-seeds-vulnerability-f03bf70e3593</a></li>\n<li><a href=\"https://security.stackexchange.com/questions/165166/what-is-the-constant-hashtables-seeds-vulnerability\">https://security.stackexchange.com/questions/165166/what-is-the-constant-hashtables-seeds-vulnerability</a></li>\n<li><a href=\"https://nodesource.com/blog/node-js-security-release-summary-july-2017\">https://nodesource.com/blog/node-js-security-release-summary-july-2017</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Hash_table\">https://en.wikipedia.org/wiki/Hash_table</a></li>\n<li><a href=\"https://events.ccc.de/congress/2011/Fahrplan/attachments/2007_28C3_Effective_DoS_on_web_application_platforms.pdf\">https://events.ccc.de/congress/2011/Fahrplan</a></li>\n<li><a href=\"https://twitter.com/michaellnorth/status/876560926337490944\">https://twitter.com/michaellnorth/status/876560926337490944</a></li>\n<li>Photo by <a href=\"https://unsplash.com/@tim_arterbury?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Tim Arterbury</a> on <a href=\"https://unsplash.com/s/photos/numbers?utm_source=unsplash&#x26;utm_medium=referral&#x26;utm_content=creditCopyText\">Unsplash</a></li>\n</ul>\n<hr>\n<p>Se você leu até aqui, é porque parece que realmente se interessa pelo assunto. Deixo para você o convite de leitura do meu próximo artigo, que será uma introdução sobre <strong>Segurança de Aplicações Web</strong>, onde irei abordar conceitos iniciais sobre vulnerabilidades, quais as referências que você pode seguir e como dar os primeiros passos neste mundo.</p>","frontmatter":{"date":"July 18, 2017","path":"/writings/pt/releases-de-seguranca","title":"Releases de Segurança","imageSlug":"posts/releases-seguranca.jpg"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"pathSlug":"/writings/pt/releases-de-seguranca","next":{"frontmatter":{"path":"/writings/pt/security-101","title":"Segurança em aplicações web - 101"}},"prev":{"frontmatter":{"path":"/writings/pt/pwa-roadshow-rio","title":"Progressive Web App Roadshow"}}}}}